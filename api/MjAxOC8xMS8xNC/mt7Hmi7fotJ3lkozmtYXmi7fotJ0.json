{"title":"深拷贝和浅拷贝","date":"2018-11-13T16:00:00.000Z","link":"2018/11/14/深拷贝和浅拷贝","tags":["php"],"updated":"2019-10-25T08:31:20.862Z","content":"<blockquote>\n<p>当在使用某个对象，而需要对该对象进行大量操作，或者在新的上下文环境中复用该对象的部分或全部数据时，需要对其进行拷贝操作。</p>\n</blockquote>\n<h4 id=\"拷贝的深浅\">拷贝的深浅<a href=\"2018/11/14/深拷贝和浅拷贝#拷贝的深浅\"></a></h4><ul>\n<li>我们日常所使用的拷贝，如一个文件夹，或者视频，音乐的拷贝，使用时可以发现这种拷贝是真正的生成了一个新的文件，占用了部分内存的。那么这种就是==深拷贝==，++也就是在计算机中重新开辟了一块新的内存地址用于存放对象。++</li>\n<li>而什么是==浅拷贝==，浅拷贝只是拷贝了基本的数据类型，而引用数据类型，复制后也是会发生引用，++浅拷贝只是指向被复制的内存地址。如果引用数据类型的对象发生了改变，那么浅拷贝出来的对象也会改变++<h4 id=\"由浅入深\"><a href=\"2018/11/14/深拷贝和浅拷贝#由浅入深\" class=\"headerlink\" title=\"由浅入深\"></a>由浅入深</h4>那么结合代码来看看从浅拷贝到深拷贝发生了什么</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">class People &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected $_name = &apos;张三&apos;;</span><br><span class=\"line\">    protected $_sex = &apos;男&apos;;</span><br><span class=\"line\">    protected $_age = &apos;18&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * return Name</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function getName() &#123;</span><br><span class=\"line\">        return $this-&gt; _name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * set name</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function setName($name) &#123;</span><br><span class=\"line\">        $this-&gt;_name = (string)$name;</span><br><span class=\"line\">        return $this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$p1 = new People();</span><br><span class=\"line\">$p2 = $p1;</span><br></pre></td></tr></table></div></figure>\n<p>上面创建了一个people类，然后实例化了p1，用赋值的方式 创建了p2 这样就得到了两个名字，年龄，性别都一样的人。那么当我们修改p1或p2时都会改变name</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $p1-&gt;getName();</span><br><span class=\"line\">echo $p2-&gt;getName();</span><br><span class=\"line\">//p2改名</span><br><span class=\"line\">$p2-&gt;setName(&apos;李四&apos;);</span><br><span class=\"line\">echo $p1-&gt;getName();</span><br><span class=\"line\">echo $p2-&gt;getName();</span><br><span class=\"line\">//p1改名</span><br><span class=\"line\">$p1-&gt;setName(&apos;王五&apos;);</span><br><span class=\"line\">echo $p1-&gt;getName();</span><br><span class=\"line\">echo $p2-&gt;getName();</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>输出为：张三张三李四李四王五王五</p>\n</blockquote>\n<p>这里对象的赋值和传值都是以引用的方式。名字虽然不同但指的是同一个人。所以这种拷贝相当于一个人有个名字和外号，人还是这个人，这种拷贝不是我所想要的。那么换种方式。用clone来复制对象。</p>\n<h4 id=\"clone函数\">clone函数<a href=\"2018/11/14/深拷贝和浅拷贝#clone函数\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$p1 = new People();</span><br><span class=\"line\">$p2 = clone $p1;</span><br><span class=\"line\">echo $p1-&gt;getName();</span><br><span class=\"line\">echo $p2-&gt;getName();</span><br><span class=\"line\">//p2改名</span><br><span class=\"line\">$p2-&gt;setName(&apos;李四&apos;);</span><br><span class=\"line\">echo $p1-&gt;getName();</span><br><span class=\"line\">echo $p2-&gt;getName();</span><br><span class=\"line\">//p1改名</span><br><span class=\"line\">$p1-&gt;setName(&apos;王五&apos;);</span><br><span class=\"line\">echo $p1-&gt;getName();</span><br><span class=\"line\">echo $p2-&gt;getName();</span><br></pre></td></tr></table></div></figure>\n<p>那么这段代码用clone关键字复制p1对象，现在这个p1对象得到了这个真正的拷贝p2，p1和p2改名时分别都能改成功，而p1和p2都属于不同的对象，都是独立的个体了，如果p1有其他的关系，那么如何呢，就如同你克隆了一个人，尽管这个克隆人和本体的基本属性相同，但会有相同的记忆吗会有复杂的社会关系吗？<br>显然并不会</p>\n<p>那么假如这个张三这个人有同学这个类，现在如何让克隆体也有这个同学类呢。下面精简一下代码</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class People &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public $name = &apos;张三&apos;;</span><br><span class=\"line\">    public $mate;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 构造函数中加载同学对象</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;mate = new Classmate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 同学类</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Classmate &#123;</span><br><span class=\"line\">    public $name =&quot;王五&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$p1 = new People();</span><br><span class=\"line\">$p2 = clone $p1;</span><br><span class=\"line\">$p2 -&gt;name = &quot;ll&quot;;</span><br><span class=\"line\">echo $p1-&gt;name;</span><br><span class=\"line\">echo $p2-&gt;name;</span><br><span class=\"line\">$p2-&gt;mate-&gt;name = &quot;ll&quot;;</span><br><span class=\"line\">echo $p1-&gt;mate-&gt;name;</span><br></pre></td></tr></table></div></figure>\n<p>然后可以发现p2可以改名字也就是p2的普通属性实现了深拷贝 而mate对象属性中的名字也会改变，存在一定的问题</p>\n<blockquote>\n<p>一般有两种解决方法：</p>\n</blockquote>\n<h6 id=\"1-重写clone函数\">1.重写clone函数<a href=\"2018/11/14/深拷贝和浅拷贝#1-重写clone函数\"></a></h6><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class People &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public $name = &apos;张三&apos;;</span><br><span class=\"line\">    public $mate;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 构造函数中加载同学对象</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;mate = new Classmate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //重写clone函数</span><br><span class=\"line\">    public function __clone() &#123;</span><br><span class=\"line\">        $this-&gt;mate = clone $this-&gt;mate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 同学类</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Classmate &#123;</span><br><span class=\"line\">    public $name =&quot;王五&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$p1 = new People();</span><br><span class=\"line\">$p2 = clone $p1;</span><br><span class=\"line\">$p2 -&gt;name = &quot;ll&quot;;</span><br><span class=\"line\">echo $p1-&gt;name;</span><br><span class=\"line\">echo $p2-&gt;name;</span><br><span class=\"line\">$p2-&gt;mate-&gt;name = &quot;ll&quot;;</span><br><span class=\"line\">echo $p1-&gt;mate-&gt;name;//输出还是王五</span><br></pre></td></tr></table></div></figure>\n<p>这样就可以解决了，但是如果classmate中有很多属性，或者people类要引入很多类，那么这样的重写clone函数就会变得很麻烦</p>\n<h6 id=\"序列化和反序列化\">序列化和反序列化<a href=\"2018/11/14/深拷贝和浅拷贝#序列化和反序列化\"></a></h6><p>这种方法不用修改函数比较简单</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">class People &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public $name = &apos;张三&apos;;</span><br><span class=\"line\">    public $mate;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 构造函数中加载同学对象</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;mate = new Classmate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 同学类</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Classmate &#123;</span><br><span class=\"line\">    public $name =&quot;王五&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$p1 = new People();</span><br><span class=\"line\">$p2 = serialize($p1);</span><br><span class=\"line\">$p2 = unserialize($p2);</span><br><span class=\"line\">$p2 -&gt;name = &quot;ll&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">$p2-&gt;mate-&gt;name = &quot;ll&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">echo $p1-&gt;mate-&gt;name;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>还可以用json_encode之后再json_decode,实现赋值和法二一样　</p>\n</blockquote>\n","prev":{"title":"Neural Networks","link":"2019/01/10/Neural Networks"},"next":{"title":"Regularization","link":"2018/11/10/Regularization"},"plink":"http://jccjd.top/2018/11/14/深拷贝和浅拷贝/","copyright":{"link":"<a href=\"http://jccjd.top/2018/11/14/深拷贝和浅拷贝/\" title=\"深拷贝和浅拷贝\">http://jccjd.top/2018/11/14/深拷贝和浅拷贝/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}