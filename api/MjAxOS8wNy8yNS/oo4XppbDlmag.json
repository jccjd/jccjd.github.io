{"title":"装饰器","date":"2019-07-24T16:00:00.000Z","date_formatted":{"ll":"Jul 25, 2019","L":"07/25/2019","MM-DD":"07-25"},"link":"2019/07/25/装饰器","tags":["Python"],"categories":["Python"],"updated":"2020-02-09T08:37:47.000Z","content":"<h3 id=\"内层函数-闭包\">内层函数 闭包<a href=\"#内层函数-闭包\" title=\"内层函数 闭包\"></a></h3><p>使用这种设计模式的一个主要优势在于， 在外部函数中对全部的参数执行检测</p>\n<h3 id=\"闭包和工厂模式\">闭包和工厂模式<a href=\"#闭包和工厂模式\" title=\"闭包和工厂模式\"></a></h3><blockquote>\n<p>闭包是使得内层函数在调用时记住他的当前环境状态</p>\n</blockquote>\n<h3 id=\"装饰器\">装饰器<a href=\"#装饰器\" title=\"装饰器\"></a></h3><p>能够方便的增加功能，而需要对原有代码进行改动，实现了代码开发过程中的开放封闭原则</p>\n<ul><li>封闭(对已经实现的功能封闭)</li>\n<li>开放(可以继续进行功能的增添)</li>\n</ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeBlod</span><span class=\"params\">(fn)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">waro</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;b&gt;\"</span>+ fn() +<span class=\"string\">\"&lt;b&gt;\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> waro</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeItero</span><span class=\"params\">(fn)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;i&gt;\"</span> + fn() + <span class=\"string\">\"&lt;i&gt;\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> add</span><br><span class=\"line\"><span class=\"meta\">@makeBlod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">'hello1'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@makeItero</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">'hello2'</span>)</span><br></pre></td></tr></table></figure><p>如上装饰器加闭包实现对原有数据的包裹，显然上面的代码在@XXX将下面的函数当参数传递给个函数XXX，由XXX对函数实现包裹操作。如果目标函数是需要参数的<br>，那么在实现的过程中应该考虑到这点，在实现的时候，将不定长参数也加上, 还可以对类进行操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 类装饰器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        print(<span class=\"string\">'初始化'</span>)</span><br><span class=\"line\">        self.__func = func</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"初始化中\"</span>)</span><br><span class=\"line\">        self.__func()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test10</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'test10'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">test10()</span><br></pre></td></tr></table></figure><p>对类进行装饰，使用装饰器可以明显看出代码的灵活性，显著提高。</p>\n<h3 id=\"装饰器路由\">装饰器路由<a href=\"#装饰器路由\" title=\"装饰器路由\"></a></h3>","prev":{"title":"线性表","link":"2019/08/05/线性表"},"next":{"title":"线程","link":"2019/07/10/线程"},"plink":"http://yoursite.com/2019/07/25/装饰器/","toc":[{"id":"内层函数-闭包","title":"内层函数 闭包","index":"1"},{"id":"闭包和工厂模式","title":"闭包和工厂模式","index":"2"},{"id":"装饰器","title":"装饰器","index":"3"},{"id":"装饰器路由","title":"装饰器路由","index":"4"}],"copyright":{"link":"<a href=\"http://yoursite.com/2019/07/25/装饰器/\" title=\"装饰器\">http://yoursite.com/2019/07/25/装饰器/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}