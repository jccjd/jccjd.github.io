{"title":"线性表","date":"2019-08-04T16:00:00.000Z","link":"2019/08/05/线性表","tags":["structure"],"categories":["structure"],"updated":"2019-10-25T08:23:58.220Z","content":"<h3 id=\"线性表\">线性表<a href=\"2019/08/05/线性表#线性表\"></a></h3><p>线性表，当然就是线性表啦，这个没啥好说的，见名知意，就能知道了<br>线性当然是连续的了,表啊见过没有，表就是表嘛，就是那种很特别的表。<br>一般的表就是array，在Python中也有array模块但没啥用处，list要比array强大的多，然后我要用list去实现一个array，(这看起了太TM蠢了)，这个结构不打算多写，直接开始吧</p>\n<h3 id=\"初始化array\">初始化array<a href=\"2019/08/05/线性表#初始化array\"></a></h3><pre><code>class MyArray(object):\n    def __init__(self,size=32):\n        self.size = size\n        # 申请一个size大小的空间\n        self._item = [None]*self.size</code></pre><p>上面的代码初始化了一个默认大小的空间，这个空间是[]来模拟的,蠢就蠢在完全可以通过访问item，对item操作就可以了<br>那就这样吧</p>\n<h3 id=\"增\">增<a href=\"2019/08/05/线性表#增\"></a></h3><p>对这个已经初始的这个数组进行一顿操作，比如增删改查，</p>\n<pre><code>def __setitem__(self, key, value):\n    if key &gt;= self.size:\n        newsize = (key + 12)\n        newarray = [None] * newsize\n        for i in range(self.__len__()):\n            newarray[i] = self.iterm[i]\n        self.iterm = newarray\n        self.size = newsize\n        del newarray\n    self.iterm[key] = value</code></pre><p>上面是通过下标对这个数组进行赋值操作，需要重写<code>__setitem__</code>方法，<br>赋值的操作很简单，直接访问iterm的位置然后直接赋值，最后一行</p>\n<pre><code>self.iterm[key] = value</code></pre><p>需要考虑的一点就是，初始化的大小是32，如果不指定大小就是32，当key的值大于32会数组越界的所有要加个判断,判断后是可以直接抛出异常的</p>\n<pre><code>if key &gt;=self.size：\n    raise Exception(&apos;Index Out Of range Exception&apos;)</code></pre><p>当然上面的代码显然不是这么做的，而是将数组扩容了，然后用了一个新数组交换数据<br>交换完后再删除了，那么在赋值时，数组的大小就改变了不用报错，自动扩容数组，显然用户体验会好很多，但是，由于重行新建了一个数组，还对原数组进行了拷贝增加了时间复杂度，和空间开销，所以在新建该数组时要先指定大小。</p>\n<h3 id=\"查\">查<a href=\"2019/08/05/线性表#查\"></a></h3><p>然后通过下标去取数组中的元素,依然要重写 <code>__getitem__</code>方法，在取值的时候要<br>验证下标的大小是否在数组的范围之内，不然很容易数组越界</p>\n<pre><code>def __getitem__(self, key):\n    if key &gt;= 0 and key &lt;= self.size:\n        print(&apos;ddd&apos;)\n        return self.iterm[key]\n    return None</code></pre><h3 id=\"改\">改<a href=\"2019/08/05/线性表#改\"></a></h3><p>改的话直接重新赋值就行了，很方便</p>\n<h3 id=\"删\">删<a href=\"2019/08/05/线性表#删\"></a></h3><p>删除的话将索引的元素设置为<code>None</code>,也并不需要特意的实现。</p>\n<blockquote>\n<p>以上是对一个线性数据结构的简单实现。全部的代码在:<br> <a href=\"https://github.com/jccjd/structure_algorithm\" target=\"_blank\" rel=\"noopener\">https://github.com/jccjd/structure_algorithm</a></p>\n</blockquote>\n","prev":{"title":"Python实现单链表","link":"2019/08/10/Python实现单链表"},"next":{"title":"装饰器","link":"2019/07/25/装饰器"},"plink":"http://jccjd.top/2019/08/05/线性表/","reward":true,"copyright":{"link":"<a href=\"http://jccjd.top/2019/08/05/线性表/\" title=\"线性表\">http://jccjd.top/2019/08/05/线性表/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}