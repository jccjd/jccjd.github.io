{"title":"Python实现循环双链表","date":"2019-08-25T16:00:00.000Z","date_formatted":{"ll":"Aug 26, 2019","L":"08/26/2019","MM-DD":"08-26"},"link":"2019/08/26/双链表","tags":["structure"],"categories":["structure"],"updated":"2020-02-09T08:37:24.000Z","content":"<p><a href=\"https://github.com/jccjd\" target=\"_blank\"><img src=\"https://img.shields.io/github/issues/jccjd/structure_algorithm\" alt=\"image\"></a><br><a href=\"https://996.icu\" target=\"_blank\"><img src=\"https://img.shields.io/badge/link-996.icu-red.svg\" alt=\"996.icu\"></a></p>\n<h4 id=\"用python实现一个循环双链表\">用Python实现一个循环双链表<a href=\"#用python实现一个循环双链表\" title=\"用Python实现一个循环双链表\"></a></h4><p>首先双链表的结构为如下结构</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value=None, prev=None, next=None)</span>:</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">        self.prev = prev</span><br><span class=\"line\">        self.next = next</span><br></pre></td></tr></table></figure><p>双链表要比单链表多了一个指向<code>prev</code>的指针，实现起来反而要比单链表要简单</p>\n<h3 id=\"__init__\">__init__<a href=\"#__init__\" title=\"__init__\"></a></h3><p>下面定义了一个<code>CircleList</code>类，初始化了第一个节点 <code>self.root</code>,然后让<code>root</code>节点的<code>prev</code><br>和<code>next</code>都指向自己，形成了一个环，后面在往上加的时候，依然在这个初始环通过重新断链再结合</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleList</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        node = Node()</span><br><span class=\"line\">        self.root = node</span><br><span class=\"line\">        self.root.prev = node</span><br><span class=\"line\">        self.root.next = node</span><br><span class=\"line\">        self.length = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure><h3 id=\"append\">append<a href=\"#append\" title=\"append\"></a></h3><blockquote>\n<p>代码依然接着上面的写，依然在<code>CircleList</code>类中继续扩展</p>\n</blockquote>\n<p>要增加节点肯定要先new一个节点，在初始的环中<code>headnode</code>和<code>tailnode</code>都是指<br><code>root</code>，增加的过程就是让之前的环中的尾节点和新节点相连，新节点再和头节点相连，那么下次<br>访问<code>root.prev</code>就是新节点了，这个节点就加上了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">append</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">    node = Node(value)</span><br><span class=\"line\">    tailnode = self.root.prev</span><br><span class=\"line\">    tailnode.next = node</span><br><span class=\"line\">    node.prev = tailnode</span><br><span class=\"line\"></span><br><span class=\"line\">    self.root.prev = node</span><br><span class=\"line\">    node.next = self.root</span><br><span class=\"line\">    self.length += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure><p>后面为了方便， 将<code>headnode</code>和<code>tailnode</code>单独写出来</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">headnode</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> self.root.next</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tailnode</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> self.root.prev</span><br></pre></td></tr></table></figure><h3 id=\"输出节点\">输出节点<a href=\"#输出节点\" title=\"输出节点\"></a></h3><p>下面用生成器的方式iter每个节点,并重写了<code>__iter__</code>对数据进行输出，具体逻辑<br>如下开始有数值的节点就是<code>self.root.next</code>,然后不断的遍历链表直到，链表<br>走到<code>self.root</code> 中断遍历。这时输出的是节点， <code>__iter__</code>对每个节点的数值<br>进行输出</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">iter_node</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    flagenode = self.root.next</span><br><span class=\"line\">    <span class=\"keyword\">while</span> flagenode <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> self.root:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> flagenode</span><br><span class=\"line\">        flagenode = flagenode.next</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> self.iter_node():</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> node.value</span><br></pre></td></tr></table></figure><h3 id=\"find\">find<a href=\"#find\" title=\"find\"></a></h3><p>下面对节点的查找是根据节点的索引进行查找，查找成功后返回该节点，上面实现了<br><code>iter_node</code> 这里直接复用了该方法，较为简单</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, index)</span>:</span></span><br><span class=\"line\">    flagindex = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> index &gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> index &lt;= self.length - <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> self.iter_node():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> flagindex == index:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> node</span><br><span class=\"line\">            flagindex += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> Exception(<span class=\"string\">'out of range'</span>)</span><br></pre></td></tr></table></figure><h3 id=\"remove\">remove<a href=\"#remove\" title=\"remove\"></a></h3><p>查找完后，就可以将查找的节点，进行删除了，依然使用索引进行删除<br>查找到后将该节点的前后节点相连接，然后删除节点，<code>length--</code>这种常规操作了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove</span><span class=\"params\">(self, index)</span>:</span></span><br><span class=\"line\">    node = self.find(index)</span><br><span class=\"line\">    node.prev.next = node.next</span><br><span class=\"line\">    node.next.prev = node.prev</span><br><span class=\"line\">    <span class=\"keyword\">del</span> node</span><br><span class=\"line\">    self.length -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure><h3 id=\"update\">update<a href=\"#update\" title=\"update\"></a></h3><p><code>update</code>就更简单了，查找后直接赋值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self, index, value)</span>:</span></span><br><span class=\"line\">       node = self.find(index)</span><br><span class=\"line\">       node.value = value</span><br></pre></td></tr></table></figure><h3 id=\"reverse\">reverse<a href=\"#reverse\" title=\"reverse\"></a></h3><p>对一个但链表进行反转其实没啥意思，因为不管从头还是从尾都可以遍历整张表<br>下面依然给出一个比较简单的实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverse</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">  tailnode = self.tailnode()</span><br><span class=\"line\">  <span class=\"keyword\">while</span> tailnode <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> self.root:</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> tailnode.value</span><br><span class=\"line\">      tailnode = tailnode.prev</span><br></pre></td></tr></table></figure>","prev":{"title":"python推导式","link":"2019/08/27/python推导式"},"next":{"title":"决策树","link":"2019/08/19/决策树"},"plink":"http://yoursite.com/2019/08/26/双链表/","toc":[{"id":"__init__","title":"__init__","index":"1"},{"id":"append","title":"append","index":"2"},{"id":"输出节点","title":"输出节点","index":"3"},{"id":"find","title":"find","index":"4"},{"id":"remove","title":"remove","index":"5"},{"id":"update","title":"update","index":"6"},{"id":"reverse","title":"reverse","index":"7"}]}