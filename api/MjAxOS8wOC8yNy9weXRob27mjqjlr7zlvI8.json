{"title":"python推导式","date":"2019-08-26T16:00:00.000Z","date_formatted":{"ll":"Aug 27, 2019","L":"08/27/2019","MM-DD":"08-27"},"link":"2019/08/27/python推导式","tags":["Python"],"categories":["Python"],"updated":"2020-02-09T08:37:40.000Z","content":"<h4 id=\"推导式comprehensions\">推导式(comprehensions)<a href=\"#推导式comprehensions\" title=\"推导式(comprehensions)\"></a></h4><p>推导式又称解析式，是Python的一种独特特性。推导式可以从一个数据序列构建另一个新的数据序列的结构体。共有三种推导式</p>\n<ol><li>list</li>\n<li>dict</li>\n<li>set<h4 id=\"列表推导式\">列表推导式<a href=\"#列表推导式\" title=\"列表推导式\"></a></h4>使用[]生成list</li>\n</ol><p>基本格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">30</span>) <span class=\"keyword\">if</span> i%<span class=\"number\">3</span> <span class=\"keyword\">is</span> <span class=\"number\">0</span>]</span><br><span class=\"line\">应该只允许一个变量 i,将 i 从 迭代器对象rang(<span class=\"number\">30</span>)中取出</span><br><span class=\"line\">然后对i进行判断 最后返回i   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">squared</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*x</span><br><span class=\"line\">newlist = [squared(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>) <span class=\"keyword\">if</span> i%<span class=\"number\">3</span> <span class=\"keyword\">is</span> <span class=\"number\">0</span>]</span><br><span class=\"line\">最后返回值可以进行函数处理</span><br></pre></td></tr></table></figure><p>该方法返回的是一个数列，当要生成的数非常多的时候，占用空间将非常大<br>存在一定的问题，下面可以用生成器推导式可以解决这个问题</p>\n<h4 id=\"生成器推导式generator\">生成器推导式(generator)<a href=\"#生成器推导式generator\" title=\"生成器推导式(generator)\"></a></h4><p>生成器推导式只需将[] 变为()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">generator = (i ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>) <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> <span class=\"keyword\">is</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at <span class=\"number\">0x0000028A8FB35E58</span>&gt;</span><br></pre></td></tr></table></figure><p>该generator 是一个生成器对象，生成器本质就是迭代器，那么该对象就可以取多少用多少，而不用一次生成全部数据。</p>\n<h4 id=\"字典推导式\">字典推导式<a href=\"#字典推导式\" title=\"字典推导式\"></a></h4><p>字典推导式将列表推导式的中括号改为大括号，下面将mydict字典的小写关键字提取出来</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mydict = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">10</span>,<span class=\"string\">'b'</span>:<span class=\"number\">34</span>,<span class=\"string\">'c'</span>: <span class=\"number\">90</span>,<span class=\"string\">'A'</span>:<span class=\"number\">10</span>&#125;</span><br><span class=\"line\">mydict_frequency = &#123;</span><br><span class=\"line\">     k.lower():mydict.get(k.lower()) <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> mydict.keys()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"创建字典的方法\">创建字典的方法<a href=\"#创建字典的方法\" title=\"创建字典的方法\"></a></h4><h5 id=\"直接创建\">直接创建<a href=\"#直接创建\" title=\"直接创建\"></a></h5><pre><code>dict = {&#39;name&#39;:&#39;name&#39;,&#39;port&#39;:100 }</code></pre>\n<h5 id=\"工厂方法\">工厂方法<a href=\"#工厂方法\" title=\"工厂方法\"></a></h5><pre><code>items = [(&#39;name&#39;,&#39;earth&#39;),(&#39;port&#39;,&#39;80)]\ndict = dict(items)</code></pre>\n<h5 id=\"fromkeys方法\">fromkeys()方法<a href=\"#fromkeys方法\" title=\"fromkeys()方法\"></a></h5><pre><code>my_dict = {}.fromkeys((&#39;x&#39;,&#39;y&#39;),12))</code></pre>\n<h4 id=\"合并两个有序列表\">合并两个有序列表<a href=\"#合并两个有序列表\" title=\"合并两个有序列表\"></a></h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#合并两个有序列表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">link_two_list</span><span class=\"params\">(l1,l2,tmp)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(l1) == <span class=\"number\">0</span> <span class=\"keyword\">or</span> len(l2) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        tmp.extend(l1)</span><br><span class=\"line\">        tmp.extend(l2)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tmp</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> l1[<span class=\"number\">0</span>] &lt; l2[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            tmp.append(l1[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">del</span> l1[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            tmp.append(l2[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">del</span> l2[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> link_two_list(l1,l2,tmp)</span><br></pre></td></tr></table></figure><p>思路：对比两个列表的第一个元素，将小的加入到新列表中，然后删除该元素，然后递归比较，每次都是对比第一个元素<br>若果有个比较列表比较短，当L2还有元素时L1已经提前清空，那么直接将<br>l2的剩余元素直接加入到tmp中，直接返回tmp</p>\n","prev":{"title":"python实现Btree","link":"2019/08/30/python实现Btree"},"next":{"title":"Python实现循环双链表","link":"2019/08/26/双链表"},"plink":"http://yoursite.com/2019/08/27/python推导式/"}