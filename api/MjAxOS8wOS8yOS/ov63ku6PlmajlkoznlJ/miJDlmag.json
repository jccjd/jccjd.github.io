{"title":"迭代器和生成器","date":"2019-09-28T16:00:00.000Z","date_formatted":{"ll":"Sep 29, 2019","L":"09/29/2019","MM-DD":"09-29"},"link":"2019/09/29/迭代器和生成器","tags":["Python"],"categories":["Python"],"updated":"2020-04-01T07:57:08.951Z","content":"<h4 id=\"迭代器iterator\">迭代器(iterator)<a href=\"#迭代器iterator\" title=\"迭代器(iterator)\"></a></h4><p>迭代器是一个可以记住遍历位置的对象<br>迭代器对象从集合的第一个位置访问，直到所有元素被访问完，切只能前进不能后退</p>\n<p>有两个基本的方法：<code>iter()</code>创建迭代器，next()访问迭代器一次只能取一个</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">iterw = iter(list)</span><br><span class=\"line\">print(next(iterw))</span><br></pre></td></tr></table></figure><p>常用的 字符串，列表 元组，字典都可用来创建迭代器</p>\n<p>可以被常规for语句访问，用while语句时要用next() 函数，但注意当迭代器遍历结束时next()函数会抛出停止迭代的异常，即可结束迭代</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">iters = iter(list)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">         print(next(iters))</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure><h4 id=\"创建一个迭代器\">创建一个迭代器<a href=\"#创建一个迭代器\" title=\"创建一个迭代器\"></a></h4><p>除了传统的，用字符串，列表，元组，字典外，还可以自己实现一个迭代器<br>在上面的字典，列表元组中，他们有一个共同的特点，都实现了<code>__iter__()</code>,<code>__next()__</code>这两个内置函数<br>只要实现这两个协议那么我们就可以创建一个自己的迭代对象,我们可以实现一个简单的range()函数，返回指定长度的数列，通过start，end,返回一个定长数列</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myrange</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(mcs,start,end)</span>:</span></span><br><span class=\"line\">      mcs.start = start</span><br><span class=\"line\">      mcs.end = end</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(mcs)</span>:</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> mcs</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(mcs)</span>:</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> mcs.start &lt;= mcs.end:</span><br><span class=\"line\">          number = mcs.start</span><br><span class=\"line\">          mcs.start += <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> number</span><br><span class=\"line\">      <span class=\"keyword\">else</span>:</span><br><span class=\"line\">          <span class=\"keyword\">raise</span> StopIteration</span><br></pre></td></tr></table></figure><p>在py3中range()就是用迭代器来实现的，当我们要生成数列的时候，不必要一次性生成全部的数列可以减少空间开销</p>\n<h4 id=\"生成器\">生成器<a href=\"#生成器\" title=\"生成器\"></a></h4><p>一个包含yield 关键字的函数就是一个生成器函数。<br>生成器的本质就是迭代器<br>当用了这个关键字时，可以返回值，不同于return ,yield返回值后，该函数会在返回结果后挂起，下次调用时继续执行，<br>调用生成器函数不会得到返回的具体值，而是得到一个可迭代对象。不会一次性在内存中生成太多数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">product</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> i</span><br><span class=\"line\"></span><br><span class=\"line\">produce = product()</span><br><span class=\"line\">print(produce.__next__())</span><br><span class=\"line\"></span><br><span class=\"line\">print(produce.__next__())</span><br><span class=\"line\">print(next(produce))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># number = 0</span></span><br><span class=\"line\"><span class=\"comment\"># for i in produce:</span></span><br><span class=\"line\"><span class=\"comment\">#     print(i)</span></span><br><span class=\"line\"><span class=\"comment\">#     number += 1</span></span><br><span class=\"line\"><span class=\"comment\">#     if number == 5:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#         break</span></span><br></pre></td></tr></table></figure><h4 id=\"生成器表达式\">生成器表达式<a href=\"#生成器表达式\" title=\"生成器表达式\"></a></h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#列表推导式</span></span><br><span class=\"line\">list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\"><span class=\"comment\"># 生成器表达式</span></span><br><span class=\"line\">list1 = (i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>))</span><br><span class=\"line\">print(list)</span><br><span class=\"line\"><span class=\"comment\"># 返回一个数列[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\">print(list1)</span><br><span class=\"line\">print(next(list1))<span class=\"comment\">#next本质就是调用__next__</span></span><br><span class=\"line\"><span class=\"comment\"># 返回以个生成器对象&lt;generator object &lt;genexpr&gt; at 0x000001DDB26C5F48&gt;</span></span><br></pre></td></tr></table></figure><ol><li>把列表解析式的[]换成()得到的就是生成器表达式</li>\n<li>python不但使用迭代器协议，让for循环变得更加通用，大部分内置函数，也是使用迭代协议访问对象。例如sum函数是Python的内置函数，该函数使用迭代器协议访问对象，而生成器实现迭代器协议。</li>\n</ol>","prev":{"title":"贝叶斯分类器","link":"2019/10/03/贝叶斯分类器"},"next":{"title":"闭包","link":"2019/09/27/闭包"},"plink":"http://yoursite.com/2019/09/29/迭代器和生成器/"}