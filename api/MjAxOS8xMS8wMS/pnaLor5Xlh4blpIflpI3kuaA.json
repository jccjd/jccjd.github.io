{"title":"面试准备复习","date":"2019-10-31T16:00:00.000Z","date_formatted":{"ll":"Nov 1, 2019","L":"11/01/2019","MM-DD":"11-01"},"link":"2019/11/01/面试准备复习","tags":["面试"],"updated":"2020-02-09T08:36:58.000Z","content":"<h3 id=\"计算机网络\">计算机网络<a href=\"#计算机网络\" title=\"计算机网络\"></a></h3><p>OSI七层网络协议:物理层，数据链路层，网络层，运输层，会话层，表示层，应用层</p>\n<p>物理层： 传输比特流01序列，定义电压，线缆标准接口</p>\n<p>数据链路层：进行寻址，并将数据报或报文段进行装帧，已经出错检测，在尾部打一个CRC</p>\n<p>网络层：ip层，</p>\n<p>运输层：UDP/TCP</p>\n<p>会话层：</p>\n<p>表示层：</p>\n<p>应用层：HTTP/HTTPS/DNS/FTP/SMTP</p>\n<h3 id=\"tcp链接\">TCP链接<a href=\"#tcp链接\" title=\"TCP链接\"></a></h3><p>在tcp的链接过程中，首先是tcp是一个c/s模式，客户端首先进同步请求<code>syn_sent</code>，发送syn，seq,ack</p>\n<p>服务端发送同步确认<code>syn_rcvd</code>，客户端收到，状态变为建立链接<code>estalished</code>，客户端在发送确认ack，服务端状态变为已建立<code>estalished</code></p>\n<p>断开链接：</p>\n<p>某一方要发送断开链接FIN，fin_wait_1,客户端close_wite, 发送ack， 客户端进入fin_wait2, 服务端发送FIN，进入last_wait, 客户端收到进入time_wait 发送ack，服务端关闭建立</p>\n<p>time_wait 2MSL：重传最后一个ack，确保对方收到    ，因为对方没有收到ack，会有一个超时重传fin，在这个时间段内客户端立刻发送ack</p>\n<h4 id=\"http\">http<a href=\"#http\" title=\"http\"></a></h4><p><strong>请求报文和响应报文</strong></p>\n<p>请求报文是由请去方法，url，协议版本，可选的请求首部字段和内容实体构成</p>\n<ul><li>post</li>\n<li>url</li>\n<li>协议</li>\n<li>Connection: keep-alive</li>\n<li>Content-type: application/json</li>\n<li>Content-Length:16</li>\n</ul><p>加上内容实体body</p>\n<p>接收到请求的服务器，会将请求内容的内容处理的结构以响应的形式返回，响应报文基本上由协议版本，状态码，用以解释状态的原因短语，可选的响应首部以及实体主体构成</p>\n<p>HTTP协议对于发送的请去和响应不做持久化处理，也就是HTTP协议是无状态协议，使用cookie进行状态管理，大多是对用户的登录状态进行管理，Cookie会根据响应报文中的<code>Set-Cookie</code>字段来通知客户端自动保存<code>Cookie</code>，下次请去时会自动发送<code>Cookie</code>，服务器中的<code>Session</code>会对比</p>\n<p><strong>Cookie 和Session</strong></p>\n<p>由于<code>HTTP</code>协议是无状态协议，服务端要记录用户的状态时，就需要某种机制来识别具体用户，比如购物车当下单时，由于<code>HTTP</code>协议无状态，所以不知道那个用户，所以服务端要为每个用户创建<code>session</code>用于识别，那如何识别呢，其实这是一个通信的问题，<code>Cookie</code>和<code>Session</code>，这也是个C/S架构，<code>Cookie</code>就用来存储这个用户的唯一标识，当第一次请求时服务端为用户创建<code>Session</code>记录并将标识放到响应中传递给客户度，客户端得到了<code>set-Cookie</code>，那么就在自己的本地浏览器写入<code>Cookie</code>缓存，当下次通信时就能够识别了</p>\n<p>如果客户端禁用了<code>Cookie</code> 怎么办</p>\n<p>如果是<code>ajax</code>的发起请求,那么将<code>http</code>的<code>head</code>里面放一个字段来标示<code>session_id</code>,浏览器的表单请求则可以在get请求后面加上对应的加密后的<code>session_id</code></p>\n<p><strong>POST和GET</strong></p>\n<ul><li>副作用：副作用是指对服务器上的资源做的改变，搜索是无副作用的，注册是有副作用</li>\n<li>幂等：幂等是指发送M和N次请求，服务器上资源的状态是一致的，注册10个和注册11个账号是不幂等的，对文章进行10次和11次修改是幂等的</li>\n</ul><p><em><code>GET</code> <code>DELETE</code> <code>PUT</code>都是幂等的，因为同样的一个请求最终结果一样，比如同样的一个delete请求，执行10次一个资源被删除10次其实在第一次就删除了后面的都只是返回一个标志并不会对服务器进行改变了，但post，同样一个请求提交10就增加了10个新资源</em></p>\n<p>在规范的应用场景上说，Get多是无副作用的，幂等的场景，关键字搜索。<code>POST</code>多是用于不幂等的场景-注册</p>\n<p>不幂等也就不能随意多次执行。所以也不能缓存，所以<code>GET</code>请求能被缓存而<code>POST</code>请求不能被缓存，如果<code>POST</code>请求被缓存了就很有意思了，比如第一次提交一个下单当服务器给一个下单请求成功的返回被浏览器缓存了，当下一次下单请求时，直接返回本地缓存而服务器中并没有下单。</p>\n<ul><li><code>GET</code>请求能缓存，<code>POST</code>不能，</li>\n<li>常规情况下<code>POST</code>的请求在body中，<code>GET</code>请求在url中</li>\n<li>由于<code>POST</code>请求在body中，所以要比<code>GET</code>能传输更多的数据，</li>\n<li>url有长度限制</li>\n<li>编码类型<code>POST</code>支持的更多</li>\n</ul><p>告知服务器意图的http方法</p>\n<p>GET：用来请求访问已被url识别的资源</p>\n<p>POST：用来传输实体的主体</p>\n<p>PUT： 用来传输文文件</p>\n<p>HEAD： 用来确认url的有效性和资源更新的日期时间</p>\n<p>DELETE： 用来删除文件</p>\n<p><strong>持久链接</strong></p>\n<p>在http协议的初始版本中，每进行一个http通信都要断开一次Tcp链接。为了解决该问题在http/1.1， 和部分http/1.0实现持久链接，只要任意一端没有明确提出断开链接，则保持TCp链接状态，能在tcp链接进行多次请求和响应的交互，在http/1.1的默认连接都是持久链接</p>\n<p>http报文结构</p>\n<p>报文首部：服务器端或客户端需要处理的请求或响应的内容和属性</p>\n<p>请求报文首都： 请求行，首部字段</p>\n<p>响应报文：状态行，首部字段</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th align=\"center\">首部字段名</th><th align=\"center\">说明</th></tr>\n</thead><tbody><tr>\n<td align=\"center\">Accept</td><td align=\"center\">用户代理可处理的媒体类型</td></tr>\n<tr>\n<td align=\"center\">Accept-Charset</td><td align=\"center\">优先字符集</td></tr>\n<tr>\n<td align=\"center\">Accept-Language</td><td align=\"center\">优先语言</td></tr>\n<tr>\n<td align=\"center\">From</td><td align=\"center\">用户的邮箱地址</td></tr>\n<tr>\n<td align=\"center\">Host</td><td align=\"center\">请求资源所在服务器</td></tr>\n<tr>\n<td align=\"center\"></td><td align=\"center\"></td></tr>\n<tr>\n<td align=\"center\"></td><td align=\"center\"></td></tr>\n<tr>\n<td align=\"center\"></td><td align=\"center\"></td></tr>\n<tr>\n<td align=\"center\"></td><td align=\"center\"></td></tr>\n</tbody></table></div></div><h4 id=\"io过程\">IO过程<a href=\"#io过程\" title=\"IO过程\"></a></h4><p>互联网服务端网络请求的原理：</p>\n<ul><li>获取请求数据，客户端与服务器建立连接发起请求，服务器接受请求</li>\n<li>构建响应，当服务器接受完请求，并在用户空间处理客户端的请求，直到构建响应完成</li>\n<li>返回数据，服务器将已构建好的响应再通过内核空间的网络I/O发给客户端</li>\n</ul><p>阻塞调用与非阻塞调用：</p>\n<p>阻塞调用是指调用结果返回之前，当前线程会被挂起，调用线程只有在得到结果之后才会返回，非阻塞调用是指在不能立即得到结果之前，该调用不会阻塞当前进程</p>\n<p>同步处理与异步处理：</p>\n<p>同步处理是指被调用方得到最终结果之后才返回给调用方，异步处理是指被调用方先返回应答，然后在计算调用结果，计算完最终结果在通知并返回给调用方。</p>\n<p>在阻塞io模型中应用程序在从调用recvfrom开始到它返回有数据报准备好的这段时间是阻塞的，recvfrom返回成功，进程开始处理数据报</p>\n<p>在非阻塞模型中，应用程序把一个套接口设置为非阻塞，就是告诉内核，当所请求的i/o操作无法完成时，不要将进程睡眠，而是返回一个错误，应用程序基于i/o操作函数将不断的轮询直到数据准备好</p>\n<p>I/O复用模型，同时阻塞多个i/o模型</p>\n<h3 id=\"线程进程协程\">线程,进程,协程<a href=\"#线程进程协程\" title=\"线程,进程,协程\"></a></h3><p>进程&gt;线程&gt;协程</p>\n<p>进程: 是 计算机资源分配的基本单位,有自己的资源和内存空间, 每个进程是独立的资源不共享</p>\n<p>线程: 是cup调度的基本单位, 他是进程的儿子,一个进程至少包含一个进程的,线程只有少量的资源描述在进程内资源可以共享,</p>\n<p>协程: 协程是线程的儿子</p>\n<h3 id=\"数据结构-amp-算法\">数据结构 &amp; 算法<a href=\"#数据结构-amp-算法\" title=\"数据结构 &amp; 算法\"></a></h3><h4 id=\"线性表\">线性表<a href=\"#线性表\" title=\"线性表\"></a></h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Array</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init</span><span class=\"params\">(self, size=<span class=\"number\">32</span>)</span>:</span></span><br><span class=\"line\">        self.size = size;</span><br><span class=\"line\">        self._items = [<span class=\"literal\">None</span>] * self.size</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setitem__</span><span class=\"params\">(self, key, value)</span>:</span></span><br><span class=\"line\">        self._items[key] = value</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._items[key]</span><br></pre></td></tr></table></figure><h4 id=\"单链表\">单链表<a href=\"#单链表\" title=\"单链表\"></a></h4><h4 id=\"双链表\">双链表<a href=\"#双链表\" title=\"双链表\"></a></h4><h4 id=\"循环双链表\">循环双链表<a href=\"#循环双链表\" title=\"循环双链表\"></a></h4><h4 id=\"队列\">队列<a href=\"#队列\" title=\"队列\"></a></h4><h4 id=\"堆栈\">堆栈<a href=\"#堆栈\" title=\"堆栈\"></a></h4><h4 id=\"二叉树\">二叉树<a href=\"#二叉树\" title=\"二叉树\"></a></h4><h4 id=\"冒泡排序\">冒泡排序<a href=\"#冒泡排序\" title=\"冒泡排序\"></a></h4><h4 id=\"选择排序\">选择排序<a href=\"#选择排序\" title=\"选择排序\"></a></h4><h4 id=\"插入排序\">插入排序<a href=\"#插入排序\" title=\"插入排序\"></a></h4><h4 id=\"快速排序\">快速排序<a href=\"#快速排序\" title=\"快速排序\"></a></h4><h4 id=\"归并排序\">归并排序<a href=\"#归并排序\" title=\"归并排序\"></a></h4><h3 id=\"操作系统\">操作系统<a href=\"#操作系统\" title=\"操作系统\"></a></h3><h4 id=\"select-poll-和epoll\">select, poll 和epoll<a href=\"#select-poll-和epoll\" title=\"select, poll 和epoll\"></a></h4><p>对于一个network IO， 会涉及到两个系统对象，一个是调用这个io的process另一个是系统内核<code>kernel</code>当一个read操作发生时，它会经历两个阶段：</p>\n<ul><li>等待数据准备<code>Waiting for the data to be ready</code></li>\n<li>将数据从内核拷贝到进程中<code>Copying the data from the kernel to the process</code></li>\n</ul><p><em>文件描述符</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/sys/fs/file-max</span><br><span class=\"line\">&gt;&gt; 773942</span><br></pre></td></tr></table></figure><h4 id=\"阻塞\">阻塞<a href=\"#阻塞\" title=\"阻塞\"></a></h4><p>当用户进程调用<strong>recvfrom</strong>这个系统调用， kernel开始了IO的第一阶段：准备数据。对于<code>network io</code>很多时候数据在一开始还没到达，这个时候kernel就要等待足够的数据到来，而在用户进程，整个进程会被阻塞，阻塞io的特点就是在io执行的两个阶段都被block</p>\n<h4 id=\"select运行机制\">select运行机制<a href=\"#select运行机制\" title=\"select运行机制\"></a></h4><p>select（）的机制中提供一种fd_set的数据结构，实际上是一个long型的数组，每一个数组元素都能力与一打开的文件句柄建立联系，当调用select()时由内核根据IO的状态修改fd_set的内容，由此来通知实行了select的进程那个socket或文件可读，</p>\n<ul><li>每次调用select都需要把fd_set集合从用户态拷贝到内核态，如果fd_set集合很大时，开销变大</li>\n<li>同时每次调用select都需要在内核遍历传递进来的所有fd_set,如果fd_set集合很大时，开销同样大</li>\n<li>为了减少数据拷贝带来的性能损害，内核对被监控的fd_set集合大小做了限制，1024</li>\n</ul><h4 id=\"poll\">Poll<a href=\"#poll\" title=\"Poll\"></a></h4><p>poll的机制与select类似，与select在本质上没有多大差别，管理多个描述符也是进行轮询，根据描述符的状态进行处理，但是poll没有最大文件描述符的数量限制，</p>\n<h4 id=\"epoll\">epoll<a href=\"#epoll\" title=\"epoll\"></a></h4><p>相对与select来说，epoll没有文件描述符个数的限制，使用一个文件描述符管理多个描述符，将用户关心的文件描述符的事件放到内核的一个事件表中，这样在用户空间和内核空间的copy只需要一次</p>\n<h4 id=\"三者之间的区别\">三者之间的区别<a href=\"#三者之间的区别\" title=\"三者之间的区别\"></a></h4><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th style=\"padding:0\"></th><th align=\"center\">select</th><th align=\"center\">poll</th><th align=\"center\">epoll</th></tr>\n</thead><tbody><tr>\n<td>操作方式</td><td align=\"center\">遍历</td><td align=\"center\">遍历</td><td align=\"center\">回调</td></tr>\n<tr>\n<td>底层实现</td><td align=\"center\">数组</td><td align=\"center\">链表</td><td align=\"center\">哈希表</td></tr>\n<tr>\n<td>IO效率</td><td align=\"center\">每次调用都进行线性遍历</td><td align=\"center\">每次都进行线性遍历</td><td align=\"center\">事件通知方式，每当fd就绪，系统注册的回调函数就会被调用，将就绪fd放到readList里面，O(1)</td></tr>\n<tr>\n<td>最大链接数</td><td align=\"center\">1024</td><td align=\"center\">无上限</td><td align=\"center\">无上限</td></tr>\n<tr>\n<td>fd拷贝</td><td align=\"center\">每次都要把fd集合从用户态拷贝到内核态</td><td align=\"center\">每次调用都要将用户态拷贝到内核态</td><td align=\"center\">只拷贝一次</td></tr>\n</tbody></table></div></div><h4 id=\"调度算法\">调度算法<a href=\"#调度算法\" title=\"调度算法\"></a></h4><ul><li>先来先服务</li>\n<li>短作业优先</li>\n<li>最高优先权调度</li>\n<li>时间片轮转</li>\n</ul><h4 id=\"死锁\">死锁<a href=\"#死锁\" title=\"死锁\"></a></h4><p>死锁产生的原因：竞争资源，程序的推进的顺序不当</p>\n<p>必要条件：互斥，请求与保持，不剥夺，环路等待</p>\n<p>处理死锁的基本方法：预防死锁，银行家算法，</p>\n<h3 id=\"面向对象编程（object-oriented-programming）\">面向对象编程（object oriented programming）<a href=\"#面向对象编程（object-oriented-programming）\" title=\"面向对象编程（object oriented programming）\"></a></h3><p>面向对象编程，什么是对象，类的实例叫对象，怎么面向对象编程，对类的实例的一系列的操作叫做面向对象编程，类是什么类是对一类物体特征的抽象，定义了包括数据的形式和对数据的操作。对某一事物抽象成类，对类中数据的操作细节是没有必要对外公开的，还有一些数据是不能对外公开的，那么就需要对其进行保护这就是封装，由于类是对某一事务的抽象，那么这个抽象的程度不同那么会产生不同的类，低抽象程度的类可以在高抽象程度的类的基础上进行细节的扩展，那么就产生了继承的概念，最低程度的抽象就是实例，有了抽象那么就会产生继承，因为抽象的程度不同，高级抽象可以映射低级抽象，在继承过程中就产生了多态，一个高级抽象可以有多个低级映射，</p>\n<h3 id=\"系统设计\">系统设计<a href=\"#系统设计\" title=\"系统设计\"></a></h3><p>MVC</p>\n<p>MVP</p>\n<p>MVVM</p>\n<p>MVT</p>\n<h3 id=\"python\">Python<a href=\"#python\" title=\"Python\"></a></h3><p><strong>一行代码实现1-100之和</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(range(<span class=\"number\">1</span>,<span class=\"number\">101</span>))</span><br></pre></td></tr></table></figure><p><strong>修改全局变量</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> a</span><br><span class=\"line\">    a = <span class=\"number\">4</span></span><br><span class=\"line\">foo()</span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure><p><strong>字典如何删除键合并两个字典</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">1</span>]: dic = &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'ls'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">18</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">2</span>]: dic</span><br><span class=\"line\">Out[<span class=\"number\">2</span>]: &#123;<span class=\"string\">'age'</span>: <span class=\"number\">18</span>, <span class=\"string\">'name'</span>: <span class=\"string\">'ls'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">3</span>]: <span class=\"keyword\">del</span> dic[<span class=\"string\">'name'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">4</span>]: dic</span><br><span class=\"line\">Out[<span class=\"number\">4</span>]: &#123;<span class=\"string\">'age'</span>: <span class=\"number\">18</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>GIL</strong></p>\n<p>GIL锁是全局解释器锁，是这个锁是加在Cpython解释器上的一个锁，保证在同一时间内只有一个线程能得到cup资源能够运行，其他线程等待，只有在线程进行io操作时才会出让锁，也就是说，在Cpython解释器下，python对占用cup的操作是很不友好的，</p>\n<p><strong>集合去重</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">9</span>]: lis = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span> ,<span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">10</span>]: a = set(lis)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">11</span>]: a</span><br><span class=\"line\">Out[<span class=\"number\">11</span>]: &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">12</span>]: lis = list(a)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">13</span>]: lis</span><br><span class=\"line\">Out[<span class=\"number\">13</span>]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure><p><strong>*args, \\</strong>kwargs**</p>\n<ul><li>*args用来传多个值</li>\n<li>**kwargs 用来传多个键值对</li>\n</ul><p><strong>闭包</strong></p>\n<p>闭包和装饰器的关系很大,装饰器的内层函数,下面的<code>addy</code>就是一个闭包,内部函数对外部变量的引用,外部变量非全局变量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addx</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addy</span><span class=\"params\">(y)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">    <span class=\"keyword\">return</span> addy</span><br></pre></td></tr></table></figure><p><strong>装饰器</strong></p>\n<p>函数可以作为参数传递,简单来讲就是函数的嵌套,但是函数的嵌套时会产生问题,最后返回的函数体<code>__name__</code>变了,需要对函数的名字进行重新赋值, 这个时候就需要<code>functools</code>解决这个问题</p>\n<p>用装饰器来对一个函数进行运行时间的统计</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(text)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">        @functools.wraps(func)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">            local_time = time.time()</span><br><span class=\"line\">            result = func(*args, **kwargs)</span><br><span class=\"line\">            print(text)</span><br><span class=\"line\">            print(<span class=\"string\">'time used %.2f'</span> % (time.time() - local_time))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wapper</span><br><span class=\"line\">    <span class=\"keyword\">return</span> func</span><br><span class=\"line\"><span class=\"meta\">@log('text')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'ddd'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fun()</span><br></pre></td></tr></table></figure><p><strong>内建类型</strong></p>\n<ul><li>int</li>\n<li>str</li>\n<li>list</li>\n<li>tuple</li>\n<li>dict</li>\n<li>set</li>\n<li>bool</li>\n</ul><p><strong>__new__ 和 <em>\\</em>init__</strong></p>\n<p>new是实例化过程，init是初始化过程，</p>\n<p><strong>使用列表推导式提取出大于10的数</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">16</span>]: res = [i**<span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> lis <span class=\"keyword\">if</span> i**<span class=\"number\">2</span> &gt; <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">17</span>]: res</span><br><span class=\"line\">Out[<span class=\"number\">17</span>]: [<span class=\"number\">16</span>, <span class=\"number\">25</span>]</span><br></pre></td></tr></table></figure><p><strong>静态方法,类方法,实例方法</strong></p>\n<p>在使用<code>@staticmethod</code> 和<code>classmethod</code>时,在一个类中,分别定义了三种方法,不加装饰,和加了装饰,不加装饰的方法.只有类被实例化时才能被调用,而加了装饰的则可以通过, 类名调用 <code>classname.class_fun()</code> <code>classname.static_fun()</code></p>\n<h3 id=\"django\">Django<a href=\"#django\" title=\"Django\"></a></h3><ul><li>django是一个大而全的框架，有全自动化的管理后台，只需要使用orm，做简单的对象定义就能生成数据库结构，以及全功能的管理后台</li>\n<li>django内置的orm跟框架内的其他模块耦合程度高</li>\n<li>django的开发效率高，但性能有限制</li>\n</ul><p><strong>django的请求生命周期</strong></p>\n<ul><li>wsgi请求封装后交给web框架</li>\n<li>中间件，对请求进行校验或在请求对象中添加其他相关数据，csrf，request.session</li>\n<li>路由匹配，根据浏览器发送的不同url去匹配不同的视图函数</li>\n<li>视图函数，在视图函数中进行业务逻辑处理，可能涉及到：orm， template 渲染</li>\n<li>wsgi，将响应的内容发送给浏览器</li>\n</ul><p><strong>中间件</strong></p>\n<p>中间件是介于request和response处理之间的一道处理过程，在全局范围内改变django的输入和输出，中间件帮助我们在视图函数执行之前和执行之后都可以做一些额外的操作，</p>\n<p>中间件就是在视图函数执行之前和执行之后都可以一些额外的操作，他是一个自定义的类类中定义了几个方法，django框架会在请求的特定时间去执行这些方法</p>\n<p>django中的中间件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MIDDLEWARE = [</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure><p>middleware是一个列表，其中包含了类中间件，在程序执行时会加载这些中间件</p>\n<p>自定义中间件</p>\n<ul><li>继承MIddlewaremixin</li>\n<li>重写父类方法</li>\n<li>将类添加到settting.py中</li>\n</ul><p>父类的五个方法</p>\n<ul><li><code>process_request(self, request)</code></li>\n<li><code>process_view(self, request, view_func, view_args, view_kwargs)</code></li>\n<li><code>preocess_template_response(self, request, response)</code></li>\n<li><code>process_exception(self, request, exception)</code></li>\n<li><code>process_response(self, request, response)</code></li>\n</ul><p>返回值可以是一个<code>None</code>或者HttpResponse对象，如果是<code>None</code>，继续按照<code>django</code>定义的向下执行，如果返回<code>Httpresponse</code>对象则直接将该对象返回给用户</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.utils.deprecation <span class=\"keyword\">import</span> MidddlewareMixin</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MD</span><span class=\"params\">(MiddlewareMixin)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request)</span>:</span></span><br><span class=\"line\">\t\tprint(<span class=\"string\">'中间件request'</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_response</span><span class=\"params\">(self, request, response)</span>:</span></span><br><span class=\"line\">\t\tprint(<span class=\"string\">'中间件process_response'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure><p><strong>WSGI</strong></p>\n<p><code>web server gateway interface</code> 是用来指定web服务器和python web应用程序或框架之间的标准接口</p>\n<p>wsgi协议要求面对两个端，一个是服务器或者说是网关端，一个是应用程序或者说是框架端，服务端调用应用程序端提供的可调用对象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simple_app</span><span class=\"params\">(environ, start_response)</span>:</span></span><br><span class=\"line\">\tstatus = <span class=\"string\">'200 OK'</span></span><br><span class=\"line\">\tresponse_headers = [(<span class=\"string\">'Content-type'</span>, <span class=\"string\">'text/plain'</span>)]</span><br><span class=\"line\">\tstart_response(status,  response_headers)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [<span class=\"string\">'Hello world!\\n'</span>]</span><br></pre></td></tr></table></figure><h3 id=\"redis\">Redis<a href=\"#redis\" title=\"Redis\"></a></h3><p>redis， nosql是一个键key-value,的数据库，……</p>\n<p>类型:</p>\n<ul><li>string</li>\n<li>set</li>\n<li>list </li>\n<li>hash</li>\n<li>zset</li>\n</ul><p><strong>String</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> jccjd <span class=\"string\">'hello'</span></span><br><span class=\"line\">get jccjd</span><br></pre></td></tr></table></figure><p><strong>Hash</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hmset jccjd field1 <span class=\"string\">'hello'</span> field2 <span class=\"string\">'world'</span></span><br><span class=\"line\">hget jccjd field1</span><br><span class=\"line\">hget jccjd field2</span><br></pre></td></tr></table></figure><p><strong>List</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lpush jccjd redis</span><br><span class=\"line\">lpush jccjd mongodb</span><br><span class=\"line\">lpush jccjd rabitmq</span><br><span class=\"line\">lrange jccjd 0 10</span><br></pre></td></tr></table></figure><p><strong>set</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sadd jccjd redis</span><br><span class=\"line\">sadd jccjd mongodb</span><br><span class=\"line\">sadd jccjd rabitmq</span><br><span class=\"line\"></span><br><span class=\"line\">smembers jccjd</span><br></pre></td></tr></table></figure><p><strong>zset</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zadd jccjd 0 redis</span><br><span class=\"line\">zadd jccjd 0 redis</span><br><span class=\"line\">zadd jccjd 0 mysql</span><br><span class=\"line\">zrangebyscore jccjd 0 1000</span><br></pre></td></tr></table></figure><h3 id=\"mysql\">Mysql<a href=\"#mysql\" title=\"Mysql\"></a></h3><h4 id=\"事务\">事务<a href=\"#事务\" title=\"事务\"></a></h4><p>数据库事务是指单个逻辑要么全执行要么不执行</p>\n<ul><li>原子性：事务是最小的执行单位，要吗全执行，要么不执行</li>\n<li>一致性：执行事务前后数据保持一直</li>\n<li>隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务数据库独立</li>\n<li>持久性：当事务被提交之后，对事务的改变是持久的，即数据库发生故障也不应该对其有影响</li>\n</ul><p>使用事务会产生问题：当一个事务对数据修改但未提交，然后另外一个事务访问了改数据那么这个数据就是脏数据，也叫脏读。一个事务修改，另一个事务覆盖修改，叫丢失修改。一个事务多次读取数据，在两次读取之间数据被修改，那么导致两次数据不一致，叫不可重复读，还有一种幻读和这个相似，两次读取数据多了，为了解决这个问题主要使用事务隔离事务级别，对脏读用Read-uncomiit，Read-commit，reperatable-read，serializer</p>\n<p>不可重复读的问题不是不可重复读，而是重复读的时候出问题了两次结果不同，我要两次结果一致，能重复读</p>\n<p>事务隔离级别</p>\n<ul><li>Read-uncommited：读取未提交</li>\n<li>read-commited: 读取以提交</li>\n<li>repeatable-read:对同一字段的多次读取结果都是一直的</li>\n<li>serializers: 最高隔离级别，</li>\n</ul><h4 id=\"数据库索引\">数据库索引<a href=\"#数据库索引\" title=\"数据库索引\"></a></h4><p>在建立表时 都要为表增加主键，再增加主键的时候其实就是将表转换成一个平衡树了，那么这个平衡树了，整个表就变成一个聚集索引了默认索引是id如果没有指定其他自增主键的话，</p>\n<p>非聚集索引，如果给表中多个字段加上索引，那么就会多出多个独立索引，每个独立索引之间互不关联，没给一个字段新建一个索引，字段中的数据就会被复制一份出来，用于生成索引，因此给表添加索引会增加表的体积，占用磁盘存储空间</p>\n<p>不管以任何方式查询表，最终会利用主键通过聚集索引来定位到数据，聚集索引是通往真是数据所在的唯一路径</p>\n<p>数据库索引是一个什么东西能，反正是说添加数据库索引能够提高数据库的查询数据效率，但是会降低用户插入和删除的效率，为啥会这样呢，又是据听说这个索引它实现的数据结构是B+tree ，那这个树是个啥呢，据听说是个平衡树的变种，可以多个树叉，可以降低树的深度，方便查找由于这个树是已经排序好的所以可以按照二分法很简单的找到目标数据，但是为了维护这个树要一点空间开销，而且在插入删除的时候树会变化左旋，右旋，具体怎么变的咱暂时还不是很清楚，只知道和平衡二叉排序树很想但要比那个复杂度要高，规则更多暂不做研究，要更改数据在磁盘中的位置，增大了IO输出，所以不适合增加删除，只能提高查找，</p>\n<h3 id=\"工具\">工具<a href=\"#工具\" title=\"工具\"></a></h3><ul><li>pycharm</li>\n<li>Hbuild</li>\n<li>atom</li>\n<li>vim</li>\n<li>git</li>\n<li>navicat</li>\n<li>postman</li>\n</ul>","prev":{"title":"mysql的访问设置","link":"2019/11/04/mysql的访问设置"},"next":{"title":"项目重点","link":"2019/10/27/项目重点"},"plink":"http://yoursite.com/2019/11/01/面试准备复习/","toc":[{"id":"计算机网络","title":"计算机网络","index":"1"},{"id":"tcp链接","title":"TCP链接","index":"2","children":[{"id":"http","title":"http","index":"2.1"},{"id":"io过程","title":"IO过程","index":"2.2"}]},{"id":"线程进程协程","title":"线程,进程,协程","index":"3"},{"id":"数据结构-amp-算法","title":"数据结构 &amp; 算法","index":"4","children":[{"id":"线性表","title":"线性表","index":"4.1"},{"id":"单链表","title":"单链表","index":"4.2"},{"id":"双链表","title":"双链表","index":"4.3"},{"id":"循环双链表","title":"循环双链表","index":"4.4"},{"id":"队列","title":"队列","index":"4.5"},{"id":"堆栈","title":"堆栈","index":"4.6"},{"id":"二叉树","title":"二叉树","index":"4.7"},{"id":"冒泡排序","title":"冒泡排序","index":"4.8"},{"id":"选择排序","title":"选择排序","index":"4.9"},{"id":"插入排序","title":"插入排序","index":"4.10"},{"id":"快速排序","title":"快速排序","index":"4.11"},{"id":"归并排序","title":"归并排序","index":"4.12"}]},{"id":"操作系统","title":"操作系统","index":"5","children":[{"id":"select-poll-和epoll","title":"select, poll 和epoll","index":"5.1"},{"id":"阻塞","title":"阻塞","index":"5.2"},{"id":"select运行机制","title":"select运行机制","index":"5.3"},{"id":"poll","title":"Poll","index":"5.4"},{"id":"epoll","title":"epoll","index":"5.5"},{"id":"三者之间的区别","title":"三者之间的区别","index":"5.6"},{"id":"调度算法","title":"调度算法","index":"5.7"},{"id":"死锁","title":"死锁","index":"5.8"}]},{"id":"面向对象编程（object-oriented-programming）","title":"面向对象编程（object oriented programming）","index":"6"},{"id":"系统设计","title":"系统设计","index":"7"},{"id":"python","title":"Python","index":"8"},{"id":"django","title":"Django","index":"9"},{"id":"redis","title":"Redis","index":"10"},{"id":"mysql","title":"Mysql","index":"11","children":[{"id":"事务","title":"事务","index":"11.1"},{"id":"数据库索引","title":"数据库索引","index":"11.2"}]},{"id":"工具","title":"工具","index":"12"}],"copyright":{"link":"<a href=\"http://yoursite.com/2019/11/01/面试准备复习/\" title=\"面试准备复习\">http://yoursite.com/2019/11/01/面试准备复习/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}