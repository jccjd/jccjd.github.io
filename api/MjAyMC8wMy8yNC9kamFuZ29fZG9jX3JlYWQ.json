{"title":"django_doc_read","date":"2020-03-23T16:00:00.000Z","date_formatted":{"ll":"Mar 24, 2020","L":"03/24/2020","MM-DD":"03-24"},"link":"2020/03/24/django_doc_read","tags":["Django"],"categories":["Django"],"updated":"2020-03-31T09:30:05.900Z","content":"<blockquote>\n<p>本文的主要内容是在阅读<code>django</code>文档时的笔记.记录一些易混淆，容易遗忘的点。</p>\n</blockquote>\n<h3 id=\"model-layer\">Model layer<a href=\"#model-layer\" title=\"Model layer\"></a></h3><p><strong>字段选项</strong></p>\n<p>在字段设置时会有 <code>null</code> 和<code>blank</code> </p>\n<p>null 为True，当字段为空时，django会将数据库中该字段设置为Null，默认为false</p>\n<p><code>blank</code>如果设置为True，该字段允许为空，与<code>null</code>不同<code>blank</code>涉及表单验证，<code>blank=False</code>表示该表单字段时必填的。</p>\n<p><code>choices</code>表单操作可以提供一个选择框</p>\n<h3 id=\"关联关系\">关联关系<a href=\"#关联关系\" title=\"关联关系\"></a></h3><p><strong>多对一关联</strong></p>\n<p>定义一个多对一关系，使用<code>django.db.models.ForeignKey</code>类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">models.ForeignKey(xxmodels, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><p><strong>自关联</strong></p>\n<p>一个模型于自己有多对一关系递归关系， <code>models.ForeignKey(&#39;self&#39;, on_delete=models.CASCADE)</code></p>\n<h3 id=\"多对多关联\">多对多关联<a href=\"#多对多关联\" title=\"多对多关联\"></a></h3><p>多对多关系中使用<code>models.ManyToManyField</code>,官方的例子中举例是Topping &amp; Pizza 关于这个关系放到那个模型中去都是可以的，不像多对一关系，Foreign Key 要放到多的一方，Many To Many 是随便放置的。但是就逻辑而言，在制作Pizza时是将Topping放入Pizza中，这样更符合常识</p>\n<p><strong>在多对多的关系中添加额外的属性字段</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">128</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Group</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">128</span>)</span><br><span class=\"line\">    members = models.ManyToManyField(Person, through=<span class=\"string\">'Membership'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Membership</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    person = models.ForeignKey(Person, on_delete=models.CASCADE)</span><br><span class=\"line\">    group = models.ForeignKey(Group, on_delete=models.CASCADE)</span><br><span class=\"line\">    date_joined = models.DateField()</span><br><span class=\"line\">    invite_reason = models.CharField(max_length=<span class=\"number\">64</span>)</span><br></pre></td></tr></table></figure><p><code>django</code>允许指定控制多对多关系的模型。在实例化<code>manyToManyField</code>的时候使用<code>through</code>参数指定多对多关系使用那个中间模型。创建add(),create(),set() 可以使用through_defaults;</p>\n<h3 id=\"执行查询\">执行查询<a href=\"#执行查询\" title=\"执行查询\"></a></h3><p>常用检索对象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all = All.objects.all() <span class=\"comment\"># 检索全部对象</span></span><br><span class=\"line\">filter = All.objects.filter(pub_date__year=<span class=\"number\">2020</span>) <span class=\"comment\"># 过滤All的子集</span></span><br><span class=\"line\">exclude = All.objects.exclude(pub_date__year=<span class=\"number\">2020</span>) <span class=\"comment\"># 取反</span></span><br><span class=\"line\">All.objects.filter(headline__startwith=<span class=\"string\">\"What\"</span>).exclude(pub_date__gte=datetime.date.today()) <span class=\"comment\"># 链式过滤</span></span><br></pre></td></tr></table></figure><h3 id=\"字段查询\">字段查询<a href=\"#字段查询\" title=\"字段查询\"></a></h3><p>字段查询定制SQLWHERE子句。基本的查询关键字参数遵照<code>field__lookuptype=value</code>,常见的you</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># gt: Greater then</span></span><br><span class=\"line\">Entry.objcets.filter(id__gt=<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\"># exact:</span></span><br><span class=\"line\">Entry.objects.get(id__exact=<span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"comment\"># iexact: 不区分大小写</span></span><br><span class=\"line\"><span class=\"comment\"># contains: like</span></span><br><span class=\"line\">select ... where  headline like <span class=\"string\">'%xx%'</span></span><br><span class=\"line\"><span class=\"comment\"># gte: Greater then or equal to</span></span><br><span class=\"line\"><span class=\"comment\"># lt: Less then</span></span><br><span class=\"line\"><span class=\"comment\"># lt: Less then or equal to</span></span><br><span class=\"line\"><span class=\"comment\"># startswith</span></span><br><span class=\"line\"><span class=\"comment\"># istartswith 不区分大小写</span></span><br><span class=\"line\"><span class=\"comment\"># endswith</span></span><br><span class=\"line\"><span class=\"comment\"># iendswith</span></span><br><span class=\"line\"><span class=\"comment\"># range()</span></span><br><span class=\"line\"><span class=\"comment\"># date 将值强制转换为日期</span></span><br><span class=\"line\">Entry.objects.filter(pub_date__date=datetime.date(<span class=\"number\">2020</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure><h3 id=\"跨关系查询\">跨关系查询<a href=\"#跨关系查询\" title=\"跨关系查询\"></a></h3><p>在跨关系，跨模型使用关系字段名，字段名由双下划线分隔直到拿到想要的字段</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entry.objects.filter(blog__name=<span class=\"string\">'xxx'</span>)</span><br></pre></td></tr></table></figure><p>反向操作。要指向一个反向的关联关系，需要使用模型名的小写</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Blog.objects.filter(entry__headline__contains=<span class=\"string\">\"Lxx\"</span>)</span><br></pre></td></tr></table></figure><p>要跨多个关系进行筛选，而某个中间模型没有满足筛选的条件的值，<code>django</code></p>\n<p>  会将它当作一个空的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Blog.objects.filter(entry__authors__name=<span class=\"string\">'xxx'</span>)</span><br></pre></td></tr></table></figure><p><strong>F表达式</strong></p>\n<p>F()的实例充当查询中的模型字段的应用。这些应用可以查询过滤器中用于在同一个模型实例中比较两个不同的字段</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询所有评论数大于pingbacks的博客条目</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> F</span><br><span class=\"line\">Entry.objects.filter(number_of_comments_gt=F(<span class=\"string\">'number_of_pingbacks'</span>)*<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure><p><strong>主键查询快捷方式</strong></p>\n<p>出于方便的目的，Django提供了一种pk的快捷方式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Blog.objects.get(id_exact=<span class=\"number\">14</span>)</span><br><span class=\"line\">Blog.objects.get(id=<span class=\"number\">14</span>)</span><br><span class=\"line\">Blog.objects.get(pk=<span class=\"number\">14</span>)</span><br></pre></td></tr></table></figure><p><strong>Q对象完成复杂查询</strong></p>\n<p>如果要执行更复杂的查询例如OR语句连接的查询， 一个Q对象用于压缩关键字参数集合，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> Q</span><br><span class=\"line\">Q(question__startwith=<span class=\"string\">'what'</span>)</span><br><span class=\"line\">Poll.objects.get(Q(question__startswith=<span class=\"string\">'Who'</span>), Q(pub_date=date(<span class=\"number\">2005</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>) | Q(pub_date)=date(<span class=\"number\">2005</span>, <span class=\"number\">5</span>,<span class=\"number\">6</span>)))</span><br></pre></td></tr></table></figure><p><strong>多对一关联</strong></p>\n<p>正向访问，若有模型有<code>ForeigenKey</code>,该模型的实例能通过其属性访问关联的对象</p>\n<p><code>select_related() QuerySet</code>方法会预先用所有一对多关联对象填充缓存。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e = Entry.objects.select_related().get(id=<span class=\"number\">2</span>)</span><br><span class=\"line\">print(e.blog)</span><br><span class=\"line\">print(e.blog)</span><br></pre></td></tr></table></figure><p><strong>反向关联</strong></p>\n<p>若模型有<code>ForeignKey</code>,外键关联的模型实例将能访问<code>Manager</code>，后者会返回第一个模型的所有实例。默认情况下，该Manager名为<code>FOO_set</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = Blog.objects.get(id=<span class=\"number\">1</span>)</span><br><span class=\"line\">b.entry_set.all()</span><br></pre></td></tr></table></figure><p>也可以在定义<code>ForeignKey</code>时设置related_name参数重写这个<code>FOO_set</code>名</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blog = ForeignKey(Blog, on_delete=models.CASCADE, related_name=<span class=\"string\">'entries'</span>)</span><br></pre></td></tr></table></figure><p><strong>多对多</strong></p>\n<p>和<code>ForeignKey</code>一样，<code>ManyToManyField</code>能指定<code>related_name</code>。如果指定了，那么就之间可以使用指定属性而不是<code>xxx_set</code>了</p>\n<p><strong>执行原生查询</strong></p>\n<p>直接使用<code>SQL</code>语句进行查询<code>Entry.objects.row(&#39;select * from Entry&#39;)</code></p>\n<p><strong>聚合</strong></p>\n<p>在<code>QuerySet</code>上生成聚合，可以通过<code>QuerySet</code>后添加<code>aggregate()</code>子句来计算<code>QuerySet</code>对象的汇总值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> Avg</span><br><span class=\"line\">Book.objects.all().aggregate(priceAvg=Avg(<span class=\"string\">'price'</span>))</span><br></pre></td></tr></table></figure><p>生成值的汇总为每个对象生成独立的汇总，使用<code>annotate</code>子句可以生成每个对象的汇总</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> Count</span><br><span class=\"line\">q = Book.objects.annotate(count(<span class=\"string\">'authors'</span>))</span><br><span class=\"line\">q[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure><p><strong>组合多个聚合</strong></p>\n<p>使用<code>annotate</code>组合多个聚合将产生错误的结果，在使用时可以使用<code>distinct</code>参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q = Book.objects.annotate(Count(<span class=\"string\">'authors'</span>, distinct=<span class=\"literal\">True</span>), Count(<span class=\"string\">'store'</span>, distinct=<span class=\"literal\">True</span>))</span><br></pre></td></tr></table></figure><h3 id=\"url调度器\">URL调度器<a href=\"#url调度器\" title=\"URL调度器\"></a></h3><p><strong>Django如何处理一个请求</strong></p>\n<p>当一个用户请求<code>Django</code>站点的一个页面，</p>\n<ol><li><code>django</code>确定使用<code>URLconf</code>模块。通常这是<code>ROOT_URLCONF</code>设置的值，</li>\n<li><code>django</code>加载该python模块并寻找可用的<code>urlpatterns</code>。她是<code>django.urls.path()</code> |  <code>django.urls.re_path()</code>实例的序列</li>\n<li>django会按照顺序遍历每个URL模式，然后会在所 请求的URL匹配到第一个模式停止，并与<code>path_info</code>匹配。</li>\n<li>一旦URL匹配成功，django导入并调用相关的视图，这个视图是一个Python函数（class-based view).视图会获得如下参数<ol><li>一个HttpRequest实例</li>\n<li>如果匹配的URL包含未命名组，那么来自正则表达式中的匹配项将作为位置参数提供</li>\n<li>关键字参数由路径表达式匹配的任何命名部分组成，并由<code>django.url.path()</code></li>\n</ol></li>\n</ol><h3 id=\"视图编写\">视图编写<a href=\"#视图编写\" title=\"视图编写\"></a></h3><p>视图返回一个包含的响应的<code>HttpResponse</code>对象，每个视图函数都要返回<code>HttpResponse</code>对象</p>\n<p>render() 将给定的模板与给定的上下文字典组合在一起，渲染返回</p>\n<p>redirect(),将一个<code>HttpResponseRedirect</code>返回到传递的参数的适当URL</p>\n<h3 id=\"drf\">DRF<a href=\"#drf\" title=\"DRF\"></a></h3><p><strong>序列化</strong></p>\n<p>将实例序列化,将模型实例转换成为Python本机的数据类型,可以将数据渲染到<code>json</code>中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">snippet = Snippet(code=<span class=\"string\">'foo = \"bar\"\\n'</span>)</span><br><span class=\"line\">snippet.save()</span><br><span class=\"line\">serializer = SnippetSerializer(snippet)</span><br><span class=\"line\">serializer.data</span><br><span class=\"line\"><span class=\"comment\"># &#123;'id': 2, 'title': '', 'code': 'print(\"hello, world\")\\n', 'linenos': False, 'language': 'python', 'style': 'friendly'&#125; 字典</span></span><br></pre></td></tr></table></figure><p>将字典转换成<code>json</code>, 成为二进制的<code>json</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context = JSONRenderer().render(serializer.data)</span><br><span class=\"line\">context</span><br><span class=\"line\"><span class=\"comment\"># b'&#123;\"id\": 2, \"title\": \"\", \"code\": \"print(\\\\\"hello, world\\\\\")\\\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\"&#125;'</span></span><br></pre></td></tr></table></figure><p><strong>反序列化</strong></p>\n<p>将流解析为python本地的数据类型,然后将这些本机数据类型还原到完全填充的实例对象中, 还可以序列化查询集,为此要添加<code>many=true</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io</span><br><span class=\"line\">stream = io.BytesIO(context)</span><br><span class=\"line\">data = JSONParser().parse(stream)</span><br><span class=\"line\">serializer = SnippetSerializer(data=data)</span><br><span class=\"line\">serializer = SnippetSerializer(data=data)</span><br><span class=\"line\">serializer.is_valid()</span><br><span class=\"line\"><span class=\"comment\"># True</span></span><br><span class=\"line\">serializer.validated_data</span><br><span class=\"line\"><span class=\"comment\"># OrderedDict([('title', ''), ('code', 'print(\"hello, world\")\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])</span></span><br><span class=\"line\">serializer.save()</span><br><span class=\"line\"><span class=\"comment\"># &lt;Snippet: Snippet object&gt;</span></span><br></pre></td></tr></table></figure><p><code>serializer.py</code>中 <code>serializer.ReadOnlyField()</code>始终是只读,不会被用于更新反序列化的实例,也可以使用<code>CharField(read_only=True)</code></p>\n<p><strong>ModelSerializer</strong></p>\n<p>为了避免复制模型中的字段去序列化,简洁代码,可以使用<code>ModelSerializer</code>类重构序列化器,只要指明模型和字段即可.</p>\n<p>在一对多或多对多中, 反向关系的模型序列化时时不包括反向关系的, 因此要添加一个显示的字段</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></span><br><span class=\"line\">    snippets = serializers.PrimaryKeyRelatedField(many=<span class=\"literal\">True</span>, queryset=Snippet.objects.all())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = User</span><br><span class=\"line\">        fields = [<span class=\"string\">'id'</span>, <span class=\"string\">'username'</span>, <span class=\"string\">'snippets'</span>]</span><br></pre></td></tr></table></figure><h4 id=\"超链api\">超链API<a href=\"#超链api\" title=\"超链API\"></a></h4><p>修改序列化器扩展<code>modelSerializer</code> 为<code>HyperlinkedModelSerializer</code></p>\n<p>different</p>\n<ul><li>id默认不包括</li>\n<li>使用一个<code>url</code>字段<code>HyperlinkedIndentityField</code></li>\n<li>关系用<code>HyperlinkedRelatedField</code> 代替<code>PrimaryKeyRelatedField</code></li>\n</ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    owner = serializers.ReadOnlyField(source=<span class=\"string\">'owner.username'</span>)</span><br><span class=\"line\">    highlight = serializers.HyperlinkedIdentityField(view_name=<span class=\"string\">'snippet-highlight'</span>, format=<span class=\"string\">'html'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = Snippet</span><br><span class=\"line\">        fields = [<span class=\"string\">'url'</span>, <span class=\"string\">'id'</span>, <span class=\"string\">'highlight'</span>, <span class=\"string\">'owner'</span>,</span><br><span class=\"line\">                  <span class=\"string\">'title'</span>, <span class=\"string\">'code'</span>, <span class=\"string\">'linenos'</span>, <span class=\"string\">'language'</span>, <span class=\"string\">'style'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    snippets = serializers.HyperlinkedRelatedField(many=<span class=\"literal\">True</span>, view_name=<span class=\"string\">'snippet-detail'</span>, read_only=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = User</span><br><span class=\"line\">        fields = [<span class=\"string\">'url'</span>, <span class=\"string\">'id'</span>, <span class=\"string\">'username'</span>, <span class=\"string\">'snippets'</span>]</span><br></pre></td></tr></table></figure><p><strong>视图编写进化过程</strong></p>\n<p>视图的编写进行硬编码的如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># url访问一个Api</span></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'snippets/'</span>, views.snippet_list),</span><br><span class=\"line\">    path(<span class=\"string\">'snippets/&lt;int:pk&gt;/'</span>, views.snippet_detail),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#具体</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snippet_list</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    List all code snippets, or create a new snippet.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'GET'</span>:</span><br><span class=\"line\">        snippets = Snippet.objects.all()</span><br><span class=\"line\">        serializer = SnippetSerializer(snippets, many=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(serializer.data, safe=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">        data = JSONParser().parse(request)</span><br><span class=\"line\">        serializer = SnippetSerializer(data=data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> serializer.is_valid():</span><br><span class=\"line\">            serializer.save()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> JsonResponse(serializer.data, status=<span class=\"number\">201</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(serializer.errors, status=<span class=\"number\">400</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snippet_detail</span><span class=\"params\">(request, pk)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Retrieve, update or delete a code snippet.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        snippet = Snippet.objects.get(pk=pk)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Snippet.DoesNotExist:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(status=<span class=\"number\">404</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'GET'</span>:</span><br><span class=\"line\">        serializer = SnippetSerializer(snippet)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(serializer.data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'PUT'</span>:</span><br><span class=\"line\">        data = JSONParser().parse(request)</span><br><span class=\"line\">        serializer = SnippetSerializer(snippet, data=data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> serializer.is_valid():</span><br><span class=\"line\">            serializer.save()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> JsonResponse(serializer.data)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(serializer.errors, status=<span class=\"number\">400</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'DELETE'</span>:</span><br><span class=\"line\">        snippet.delete()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(status=<span class=\"number\">204</span>)</span><br></pre></td></tr></table></figure><p>要简化代码,使用框架, <code>@api_view</code> &amp; <code>APIView</code>则如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@api_view(['GET', 'POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snippet_list</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    List all code snippets, or create a new snippet.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'GET'</span>:</span><br><span class=\"line\">        snippets = Snippet.objects.all()</span><br><span class=\"line\">        serializer = SnippetSerializer(snippets, many=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(serializer.data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">        serializer = SnippetSerializer(data=request.data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> serializer.is_valid():</span><br><span class=\"line\">            serializer.save()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@api_view(['GET', 'PUT', 'DELETE'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snippet_detail</span><span class=\"params\">(request, pk)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Retrieve, update or delete a code snippet.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        snippet = Snippet.objects.get(pk=pk)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Snippet.DoesNotExist:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(status=status.HTTP_404_NOT_FOUND)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'GET'</span>:</span><br><span class=\"line\">        serializer = SnippetSerializer(snippet)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(serializer.data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'PUT'</span>:</span><br><span class=\"line\">        serializer = SnippetSerializer(snippet, data=request.data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> serializer.is_valid():</span><br><span class=\"line\">            serializer.save()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response(serializer.data)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'DELETE'</span>:</span><br><span class=\"line\">        snippet.delete()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure><p>这和常规Django视图没有区别</p>\n<p><strong>基于类视图减少代码</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetDetail</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Retrieve, update or delete a snippet instance.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_object</span><span class=\"params\">(self, pk)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Snippet.objects.get(pk=pk)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Snippet.DoesNotExist:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Http404</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, pk, format=None)</span>:</span></span><br><span class=\"line\">        snippet = self.get_object(pk)</span><br><span class=\"line\">        serializer = SnippetSerializer(snippet)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(serializer.data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span><span class=\"params\">(self, request, pk, format=None)</span>:</span></span><br><span class=\"line\">        snippet = self.get_object(pk)</span><br><span class=\"line\">        serializer = SnippetSerializer(snippet, data=request.data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> serializer.is_valid():</span><br><span class=\"line\">            serializer.save()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response(serializer.data)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(self, request, pk, format=None)</span>:</span></span><br><span class=\"line\">        snippet = self.get_object(pk)</span><br><span class=\"line\">        snippet.delete()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure><p><strong>基于mixins视图</strong></p>\n<p>mixin类提供<code>.list()</code>&amp; <code>.create()</code>操作,将<code>get</code>&amp; <code>post</code>显示的绑到适当的操作,<code>GenericAPIView</code>来提供核心功能,提供<code>.retrieve()</code>,<code>.update()</code>&amp;<code>.destory()</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetDetail</span><span class=\"params\">(mixins.RetrieveModelMixin,</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"params\">                    mixins.UpdateModelMixin,</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"params\">                    mixins.DestroyModelMixin,</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"params\">                    generics.GenericAPIView)</span>:</span></span><br><span class=\"line\">    queryset = Snippet.objects.all()</span><br><span class=\"line\">    serializer_class = SnippetSerializer</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.retrieve(request, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span><span class=\"params\">(self, request, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.update(request, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(self, request, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.destroy(request, *args, **kwargs)</span><br></pre></td></tr></table></figure><p><strong>基于通用类视图</strong></p>\n<p>rest框架提供一组已经混合的通用视图,进一步减少代码量,这是mixin的跟更一步</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> snippets.models <span class=\"keyword\">import</span> Snippet</span><br><span class=\"line\"><span class=\"keyword\">from</span> snippets.serializers <span class=\"keyword\">import</span> SnippetSerializer</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> generics</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetList</span><span class=\"params\">(generics.ListCreateAPIView)</span>:</span></span><br><span class=\"line\">    queryset = Snippet.objects.all()</span><br><span class=\"line\">    serializer_class = SnippetSerializer</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetDetail</span><span class=\"params\">(generics.RetrieveUpdateDestroyAPIView)</span>:</span></span><br><span class=\"line\">    queryset = Snippet.objects.all()</span><br><span class=\"line\">    serializer_class = SnippetSerializer</span><br></pre></td></tr></table></figure><p><strong>身份验证</strong></p>\n<p>将代码段和用户相关联, 如果创建一个代码段,则该代码段的用户与该代码段实例无法关联,用户不是作为序列化表示的一部分,而是作为请求的属性,处理时覆盖<code>.perform_create()</code>方法,该方法使我们可以修改实例保存的管理方式,并处理传入请求或请求的url中隐含的任何信息. 现在序列化器方法将被传递一个附加<code>owner</code>字段, 以及来自请求的已验证数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">perform_create</span><span class=\"params\">(self, serializer)</span>:</span></span><br><span class=\"line\">\tserializer.save(owner=self.request.user)</span><br></pre></td></tr></table></figure><p><strong>向视图中添加权限</strong></p>\n<p>代码和用户相关联,我们希望只有经过身份验证的用户才能创建,更新权限,</p>\n<p><code>IsAuthenticatedOrReadOnly</code>,这确保只有经过身份验证的请求具有读写访问权限,而未经身份验证的请求具有只读访问权限.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framwork <span class=\"keyword\">import</span> permissions</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">SnippetList</span><span class=\"params\">(ListAPIView)</span>:</span></span><br><span class=\"line\">    permission_classes = [permissions.IsAuthenticatedOrReadOnly]</span><br></pre></td></tr></table></figure><p>对象权限级别, 代码段对任何人都可见,但是只有创建代码段的用户才能更新和删除,要自定义权限.创建一个<code>permissions.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> permissions</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IsOwnerOrReadOnly</span><span class=\"params\">(permissions.BasePermission)</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">has_object_permission</span><span class=\"params\">(self, request, view, obj)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> request.method <span class=\"keyword\">in</span> permissions.SAFE_METHODS:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.owner == request.user</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#--------------</span></span><br><span class=\"line\"><span class=\"comment\">#serializer.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> snippets.permissions <span class=\"keyword\">import</span> IsOwnerOrReadOnly</span><br><span class=\"line\"></span><br><span class=\"line\">permission_classes = [permissions.IsAuthenticatedOrReadOnly,</span><br><span class=\"line\">                      IsOwnerOrReadOnly]</span><br></pre></td></tr></table></figure>","next":{"title":"Hello World","link":"2020/02/10/hello-world"},"plink":"http://yoursite.com/2020/03/24/django_doc_read/","toc":[{"id":"model-layer","title":"Model layer","index":"1"},{"id":"关联关系","title":"关联关系","index":"2"},{"id":"多对多关联","title":"多对多关联","index":"3"},{"id":"执行查询","title":"执行查询","index":"4"},{"id":"字段查询","title":"字段查询","index":"5"},{"id":"跨关系查询","title":"跨关系查询","index":"6"},{"id":"url调度器","title":"URL调度器","index":"7"},{"id":"视图编写","title":"视图编写","index":"8"},{"id":"drf","title":"DRF","index":"9","children":[{"id":"超链api","title":"超链API","index":"9.1"}]}],"copyright":{"link":"<a href=\"http://yoursite.com/2020/03/24/django_doc_read/\" title=\"django_doc_read\">http://yoursite.com/2020/03/24/django_doc_read/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}